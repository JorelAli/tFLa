include impure {
    # Adds two parameters together
    add = x -> y -> x + y;

    basicOperation = 123.25 + 2;

    operators = 1 + 2 - 3 * 4 / 5 % 6;

    bools = true || false && true;

    # Lists
    someList      = [1, 2];
    someOtherList = [3];
    emptyList     = [];

    #Example with guards
    maxOr0 = x -> y -> |>
        | x > y ->> x 
        | x < y ->> y 
        | ->> 0;

    matchExample = x -> match x 
        | [] ->> 0
        | ->> "not 0";

    nestedGuard = x -> |>
        | x == 0 ->> 0
        | ->> |>
            | x == 1 ->> 1
            | ->> -1;

    inlineMax = x -> y -> |>| x > y ->> x | x < y ->> y |->> 0;

    # Set operations
    union =      set1 -> set2 -> set1 /+ set2;
    intersect =  set1 -> set2 -> set1 /- set2;
    difference = set1 -> set2 -> set1 // set2;
    

    a = true;

    # Adds sets to scope of expressions
    myFunctions2 = include {
        myAdd = x -> y -> x + y;
    } in myAdd 2;

    blah = impure {
        @impureFunction = 2;
    };

    head' = list -> list ++ [2, 3, (2 + 2)];

    nestedList = [2, [3]];

    const = 4;

    stringExample = "hello";

    p = x -> x;

    example = head [] ++ tail [];

    importExample = @import "exec";
    importExample = @print "hello!";

    a = lambda -> lambda 2 3;

    factorial = input -> |>
        | input == 0 ->> 1
        | ->> input * factorial (input - 1);
        
} in factorial 1

###
block comment
###

#maxOr0 (nestedGuard 2) -2

#union {} {}

#(x -> x -> x) 2 3

#(y -> (x -> y)) 2 3

#add 2 3

# a add 
#add ((x -> x) 2) 3

#add 2 3 #(x -> x) 2

#add (2) 3

#a add
#add (p 2) 3
#head' [] []
#head'
#head' [5, 6, 1, 0]
#add 1 2
#const + 10 #add (add 1 2) 3 #Expect 6 

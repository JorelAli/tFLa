|>| std.all [

    #[ Standard Library Tests ]#

        ## Tests std.foldl' on lists
        std.foldl' (a -> b -> a + b) 0 [1, 2, 3] == 6,
        std.foldl' (a -> b -> a * b) 1 [1, 2, 3, 4, 5] == 120,

        ## Tests std.map function
        std.map (a -> 2) [1, 2, 3] == [2, 2, 2],
        head (std.map (a -> b -> a + b) [2]) 2 == 4,

        ## Tests std.genList
        std.genList (x -> x * x) 5 == [1, 4, 9, 16, 25],

        ## Tests std.any
        std.any [true] == true,
        std.any [false] == false,
        std.any [] == false,

        ## Tests std.elemAt
        std.elemAt [1, 2, 3] 0 == 1,
        std.elemAt [1, 2, 3] 2 == 3,

        ## Tests std.filter
        std.filter (x -> x > 2) [1, 2, 3, 4, 5] == [3, 4, 5],

        ## Tests std.length
        std.length [1, 2, 3] == 3,

        ## Tests std.assert
        std.assert (1 == 1),

        #[ Tests the Maths library ]#
        std.math.max 2 3 == 3,
        std.math.min 2 3 == 2,

        ## std.math.pow 2 8 == 256,

    #[ Various Other Tests ]#

        #[ Tests the following:
        - Include ... in expressions
        - Set accessing
        - Set comparisons
        - Set construction within a function
        - Basic data type declarations ]#
        include {
            isComplex = complex:set	-> complex ? "re" && complex ? "im";

            add = complex1:set -> complex2:set -> |>
                | (isComplex complex1) && (isComplex complex2) ->> {
                    re = complex1.re + complex2.re;
                    im = complex1.im + complex2.im;
                }
                | ->> {};
        } in add {re = 2; im = 1;} {re = 1; im = 3;} == {re=3;im=4;}
  
] 
 ->> @print "All tests passed!"
|->> @print "Tests failed :("
options {
	STATIC = false;
}

PARSER_BEGIN(ForteLang)

import java.util.LinkedList;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.Stack;
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

import java.util.regex.Pattern;

import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;

import java.nio.file.Files;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

import java.math.BigDecimal;
import java.math.RoundingMode;

public class ForteLang {
	
	/** Static fields */
	static String fileName;
	static boolean impureMode = false;
	static boolean silent = false;
	static boolean maxprecision = false;
	static boolean LOGGING_ENABLE = true;
	static Scanner globalScanner = null;
	public static int innerComments = 0;

	static Scanner getGlobalScanner() {
		if(globalScanner == null) {
			globalScanner = new Scanner(System.in);
		}
		return globalScanner;
	}

	static String prettifyOutput(Object result) {
		if(result instanceof String) {
			return "\"" + result + "\"";
		} 
		if(result instanceof BigDecimal && !maxprecision) {
		  	BigDecimal d = (BigDecimal) result;
			if(d.stripTrailingZeros().scale() > 0) {
				result = d.doubleValue();
			}
		}
		return String.valueOf(result);
	}

	/** Main method */
	public static void main(String[] args) throws Exception {
	  	boolean replMode = false;
	  	Set<String> arguments = new HashSet<String>();
	  	for(String str : args) {
		    if(str.startsWith("-")) {
				arguments.add(str.substring(1, str.length()));
		    }
	  	}
	  	
	  	if(args.length - arguments.size() < 1 && !replMode) {
	  	  	System.out.println("Usage: java ForteLang <File>");
			return;
	  	}


		File file = new File(args[0]);
	  	fileName = file.getName();
		try {
		  	/* Run the parser */

			Object result = new ForteLang(new FileInputStream(file)).input();
			

		} catch(Exception e) {
		  	e.printStackTrace();
		  	return;
		}
	}

	/** Helper functions */

	static String location(Token token) {
 		return " (Line " + token.beginLine + " in " + fileName + ")";
	}

	static String parseString(Token str) {
		return str.image.substring(1, str.image.length() - 1);
	}	
}

PARSER_END(ForteLang)

//Data types
TOKEN : { < NUMBER : ("-")? (["0"-"9"])+ > }
TOKEN : { < FLOATING_POINT_NUMBER : <NUMBER>"."<NUMBER> > }
TOKEN : { < BOOLEAN : "true" | "false" > } 

//Brackets
TOKEN : { < OPENBRACKET : "(" > }
TOKEN : { < CLOSEBRACKET : ")" > }

//Sets
TOKEN : { < EQUALS : "=" > }
TOKEN : { < SEMICOLON : ";" > }
TOKEN : { < OPENCBRACKET : "{" > }
TOKEN : { < CLOSECBRACKET : "}" > }

//Types
TOKEN : { < NUM : "num" > } 
TOKEN : { < BOO : "bool" > }
TOKEN : { < COLON : ":" > }

//Functions
TOKEN : { < VAR_NAME : ["A"-"Z", "a"-"z", "@", "_"] (["A"-"Z", "a"-"z", "0"-"9", "_"])* (["\'"])* > }
TOKEN : { < FUNCTION_ARROW : "->" > }

//Comments
SPECIAL_TOKEN : { < "##|" (~["\r", "\n"])* > }
SKIP : { < "##" (~["\r", "\n"])* > }
SKIP : { "#[" : BlockComment }
<BlockComment> SKIP : { < "#[" > { ForteLang.innerComments++; } }
<BlockComment> MORE : { < ~[] > }
<BlockComment> SKIP : { < "]#" >
	{
  		if(ForteLang.innerComments == 0) {
	  	    SwitchTo(DEFAULT);
	  	} else {
  	    	ForteLang.innerComments--;
  		}
	}
}

//Whitespace
SKIP : { "\n" | "\r" | " " | "\t" }

/** Main endpoint */
Object input() throws Exception : { Object expression = null; Token eof; } {
	expression = set()
	<EOF>
	
	{
		System.out.println("=== Parsing complete ===");
		System.out.println();
//		System.out.println("Program to evaluate: " + expression);

		return null;
  	}
}

FL_Set set() throws Exception : { FL_Set set; Token setDeclaration; Token attrName; Object attrValue; } {
  	{ set = new FL_Set(); }
	setDeclaration = <OPENCBRACKET>
	(
	  	attrName = <VAR_NAME>
	  	<EQUALS>
	  	attrValue = expression()
	  	<SEMICOLON>
	  	{ set.put(attrName.image, attrValue); }
	)*
	<CLOSECBRACKET>
	{ return set; }
}

BigDecimal number() throws Exception : { Token value; } {
	  value = <NUMBER> 				  { return new BigDecimal(value.image); }
	| value = <FLOATING_POINT_NUMBER> { return new BigDecimal(value.image); }
}

Object value() throws Exception : { Token value; Object result; } {
	result = number() { return result; }
	| value = <BOOLEAN> { return Boolean.parseBoolean(value.image); }
	| value = <VAR_NAME> { return value.image; }
}

void type() throws Exception : { } {
	(<NUM> | <BOO>) | "(" type() "->" type() ")"//(LOOKAHEAD(2) "->" type())* 
}

void abstraction() throws Exception : { } {
	type() <VAR_NAME> <FUNCTION_ARROW> expression()
}

Object expression() throws Exception : { } {
  	( LOOKAHEAD(3)

  		( LOOKAHEAD(2) abstraction() | value() ) expression()
    	// Abstraction
	 	| abstraction()

		// Variable
		|  value()
	
		// Application
//		| ( LOOKAHEAD(2) abstraction() | value() ) expression()

 	)
	{ return null; }
}
